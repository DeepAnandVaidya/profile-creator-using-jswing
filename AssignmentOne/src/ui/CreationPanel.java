/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Color;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.PersonalDetails;

/**
 *
 * @author deepv
 */
public class CreationPanel extends javax.swing.JPanel {
    
    PersonalDetails personalDetails;

    /**
     * Creates new form NewJPanel
     */
    public CreationPanel(PersonalDetails personalDetails) {
        initComponents();
        this.personalDetails = personalDetails;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        jSubPanel = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblGeoData = new javax.swing.JLabel();
        lblDob = new javax.swing.JLabel();
        lblTeleNos = new javax.swing.JLabel();
        lblFaxNo = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblSsn = new javax.swing.JLabel();
        lblMedicalRecNum = new javax.swing.JLabel();
        lblHealthPlanNum = new javax.swing.JLabel();
        lblBankAcc = new javax.swing.JLabel();
        lblLicenseNo = new javax.swing.JLabel();
        lblVehicleIden = new javax.swing.JLabel();
        lblDeviceIden = new javax.swing.JLabel();
        lblLinkedIn = new javax.swing.JLabel();
        lblIpAddress = new javax.swing.JLabel();
        lblBiometric = new javax.swing.JLabel();
        lblFacePhoto = new javax.swing.JLabel();
        lblUniqueIden = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtGeoData = new javax.swing.JTextField();
        txtDob = new javax.swing.JTextField();
        txtTeleNos = new javax.swing.JTextField();
        txtFaxNo = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtSsn = new javax.swing.JTextField();
        txtMedicalRecNum = new javax.swing.JTextField();
        txtHealthPlanNum = new javax.swing.JTextField();
        txtBankAcc = new javax.swing.JTextField();
        txtLicenseNo = new javax.swing.JTextField();
        txtVehicleIden = new javax.swing.JTextField();
        txtDeviceIden = new javax.swing.JTextField();
        txtLinkedin = new javax.swing.JTextField();
        txtIpAddress = new javax.swing.JTextField();
        txtUniqueIden = new javax.swing.JTextField();
        btnBrowseImg = new javax.swing.JButton();
        btnBrowseBiometric = new javax.swing.JButton();
        lblNote = new javax.swing.JLabel();
        txtAltEmail1 = new javax.swing.JTextField();
        txtAltNos = new javax.swing.JTextField();
        txtGeoData1 = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        llblCreate = new javax.swing.JLabel();

        setBackground(new java.awt.Color(248, 248, 248));

        jScrollPane.setBackground(new java.awt.Color(248, 248, 248));
        jScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jSubPanel.setBackground(new java.awt.Color(248, 248, 248));

        lblName.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblName.setText("Name:");

        lblGeoData.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblGeoData.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGeoData.setText("Geographic data:");

        lblDob.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblDob.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDob.setText("Date of birth:");

        lblTeleNos.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblTeleNos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTeleNos.setText("Telephone numbers:");

        lblFaxNo.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblFaxNo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFaxNo.setText("FAX number:");

        lblEmail.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblEmail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEmail.setText("Email addresses:");

        lblSsn.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblSsn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSsn.setText("Social Security number:");

        lblMedicalRecNum.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblMedicalRecNum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMedicalRecNum.setText("Medical record number:");

        lblHealthPlanNum.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblHealthPlanNum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHealthPlanNum.setText("Health plan beneficiary number:");

        lblBankAcc.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblBankAcc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBankAcc.setText("Bank account numbers:");

        lblLicenseNo.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblLicenseNo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLicenseNo.setText("Certificate/license number:");

        lblVehicleIden.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblVehicleIden.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVehicleIden.setText("Vehicle identifiers and serial numbers including license plates:");

        lblDeviceIden.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblDeviceIden.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDeviceIden.setText("Internet protocol addresses:");

        lblLinkedIn.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblLinkedIn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLinkedIn.setText("Biometric identifiers (i.e. retinal scan, fingerprints):");

        lblIpAddress.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblIpAddress.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIpAddress.setText("Device identifiers and serial numbers:");

        lblBiometric.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblBiometric.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBiometric.setText("LinkedIn:");

        lblFacePhoto.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblFacePhoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFacePhoto.setText("Full face photos and comparable images:");

        lblUniqueIden.setFont(new java.awt.Font("Times New Roman", 1, 10)); // NOI18N
        lblUniqueIden.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUniqueIden.setText("Any unique identifying number, characteristic, or code:");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        txtGeoData.setForeground(new java.awt.Color(153, 153, 153));
        txtGeoData.setText("Address Line 1");
        txtGeoData.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtGeoDataFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtGeoDataFocusLost(evt);
            }
        });

        txtDob.setForeground(new java.awt.Color(153, 153, 153));
        txtDob.setText("yyyy-mm-dd");
        txtDob.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDobFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDobFocusLost(evt);
            }
        });
        txtDob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDobActionPerformed(evt);
            }
        });

        txtTeleNos.setForeground(new java.awt.Color(153, 153, 153));
        txtTeleNos.setText("Primary No.");
        txtTeleNos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTeleNosFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTeleNosFocusLost(evt);
            }
        });
        txtTeleNos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTeleNosActionPerformed(evt);
            }
        });

        txtFaxNo.setForeground(new java.awt.Color(153, 153, 153));
        txtFaxNo.setText("8 digit FAX number");
        txtFaxNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFaxNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFaxNoFocusLost(evt);
            }
        });

        txtEmail.setForeground(new java.awt.Color(153, 153, 153));
        txtEmail.setText("Primary Email");
        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEmailFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });

        txtSsn.setForeground(new java.awt.Color(153, 153, 153));
        txtSsn.setText("9 digit SSN");
        txtSsn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSsnFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSsnFocusLost(evt);
            }
        });
        txtSsn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSsnActionPerformed(evt);
            }
        });

        txtLinkedin.setForeground(new java.awt.Color(153, 153, 153));
        txtLinkedin.setText("Valid URL");
        txtLinkedin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLinkedinFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLinkedinFocusLost(evt);
            }
        });

        btnBrowseImg.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnBrowseImg.setText("Choose a photo");
        btnBrowseImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseImgActionPerformed(evt);
            }
        });

        btnBrowseBiometric.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnBrowseBiometric.setText("Upload biometrics");
        btnBrowseBiometric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseBiometricActionPerformed(evt);
            }
        });

        lblNote.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        lblNote.setForeground(new java.awt.Color(0, 176, 138));
        lblNote.setText("All fields are mandatory");

        txtAltEmail1.setForeground(new java.awt.Color(153, 153, 153));
        txtAltEmail1.setText("Alternate Email");
        txtAltEmail1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAltEmail1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAltEmail1FocusLost(evt);
            }
        });

        txtAltNos.setForeground(new java.awt.Color(153, 153, 153));
        txtAltNos.setText("Alternate No.");
        txtAltNos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAltNosFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAltNosFocusLost(evt);
            }
        });
        txtAltNos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAltNosActionPerformed(evt);
            }
        });

        txtGeoData1.setForeground(new java.awt.Color(153, 153, 153));
        txtGeoData1.setText("Address Line 2");
        txtGeoData1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtGeoData1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtGeoData1FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jSubPanelLayout = new javax.swing.GroupLayout(jSubPanel);
        jSubPanel.setLayout(jSubPanelLayout);
        jSubPanelLayout.setHorizontalGroup(
            jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSubPanelLayout.createSequentialGroup()
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jSubPanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblGeoData)
                            .addComponent(lblDob)
                            .addComponent(lblTeleNos)
                            .addComponent(lblFaxNo)
                            .addComponent(lblEmail)
                            .addComponent(lblSsn)
                            .addComponent(lblMedicalRecNum)
                            .addComponent(lblHealthPlanNum)
                            .addComponent(lblBankAcc)
                            .addComponent(lblLicenseNo)
                            .addComponent(lblVehicleIden)
                            .addComponent(lblIpAddress)
                            .addComponent(lblBiometric)
                            .addComponent(lblDeviceIden)
                            .addComponent(lblLinkedIn)
                            .addComponent(lblFacePhoto)
                            .addComponent(lblUniqueIden)))
                    .addGroup(jSubPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblNote)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblName)))
                .addGap(18, 18, 18)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFaxNo)
                    .addComponent(txtSsn)
                    .addComponent(txtMedicalRecNum)
                    .addComponent(txtHealthPlanNum)
                    .addComponent(txtBankAcc)
                    .addComponent(txtLicenseNo)
                    .addComponent(txtVehicleIden)
                    .addComponent(txtDeviceIden)
                    .addComponent(txtLinkedin)
                    .addComponent(txtIpAddress)
                    .addComponent(txtUniqueIden)
                    .addComponent(btnBrowseImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBrowseBiometric, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtName)
                    .addGroup(jSubPanelLayout.createSequentialGroup()
                        .addComponent(txtTeleNos, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAltNos))
                    .addGroup(jSubPanelLayout.createSequentialGroup()
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAltEmail1))
                    .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jSubPanelLayout.createSequentialGroup()
                        .addComponent(txtGeoData, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtGeoData1)))
                .addContainerGap(223, Short.MAX_VALUE))
        );
        jSubPanelLayout.setVerticalGroup(
            jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSubPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNote))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGeoData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGeoData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtGeoData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDob, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTeleNos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTeleNos)
                    .addComponent(txtAltNos))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFaxNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFaxNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtAltEmail1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSsn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSsn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMedicalRecNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMedicalRecNum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHealthPlanNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHealthPlanNum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBankAcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBankAcc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLicenseNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLicenseNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVehicleIden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVehicleIden, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDeviceIden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIpAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLinkedin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBiometric, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDeviceIden, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jSubPanelLayout.createSequentialGroup()
                        .addComponent(lblLinkedIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(19, 19, 19))
                    .addGroup(jSubPanelLayout.createSequentialGroup()
                        .addComponent(btnBrowseBiometric)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jSubPanelLayout.createSequentialGroup()
                        .addComponent(lblFacePhoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(19, 19, 19)
                        .addComponent(lblUniqueIden, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jSubPanelLayout.createSequentialGroup()
                        .addComponent(btnBrowseImg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(txtUniqueIden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(69, 69, 69))
        );

        jScrollPane.setViewportView(jSubPanel);

        btnSave.setBackground(new java.awt.Color(215, 254, 211));
        btnSave.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(72, 151, 64));
        btnSave.setText("Save Changes");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        llblCreate.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        llblCreate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        llblCreate.setText("<html>Create <span font color=\"rgb(0, 198, 254)\"><b>YOUR</b></span> profile</html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(266, 266, 266))
            .addComponent(llblCreate, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(llblCreate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSave)
                .addContainerGap(24, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtDobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDobActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDobActionPerformed

    private void txtSsnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSsnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSsnActionPerformed

    /**
     * method to handle save button click event
     *
     * @param evt
     */
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (validations()) {
            
            try {
                // Map values from the text fields
                readValsFromTxtFields();
            } catch (ParseException ex) {
                Logger.getLogger(CreationPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * method to handle the browse button click event
     *
     * @param evt
     */
    private void btnBrowseImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseImgActionPerformed
        JFileChooser browseimage = new JFileChooser();
        FileNameExtensionFilter fileExtension = new FileNameExtensionFilter(".JPG and .PNG", "jpg", "png");
        browseimage.setFileFilter(fileExtension);
        int showDialogue = browseimage.showOpenDialog(null);
        
        if (showDialogue == JFileChooser.APPROVE_OPTION) {
            File file = browseimage.getSelectedFile();
            String selectedImagePath = file.getAbsolutePath();
            JOptionPane.showConfirmDialog(this, "Select this image?");
            personalDetails.setFacePhoto(selectedImagePath);
        }
    }//GEN-LAST:event_btnBrowseImgActionPerformed

    private void btnBrowseBiometricActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseBiometricActionPerformed
        JFileChooser browseimage = new JFileChooser();
        FileNameExtensionFilter fileExtension = new FileNameExtensionFilter(".JPG and .PNG", "jpg", "png");
        browseimage.setFileFilter(fileExtension);
        int showDialogue = browseimage.showOpenDialog(null);
        
        if (showDialogue == JFileChooser.APPROVE_OPTION) {
            File file = browseimage.getSelectedFile();
            String selectedImagePath = file.getAbsolutePath();
            JOptionPane.showConfirmDialog(this, "Select this image for biometrics?");
            personalDetails.setBiometric(selectedImagePath);
        }
    }//GEN-LAST:event_btnBrowseBiometricActionPerformed

    private void txtTeleNosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTeleNosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTeleNosActionPerformed

    private void txtAltNosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAltNosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAltNosActionPerformed

    private void txtTeleNosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTeleNosFocusGained
        // TODO add your handling code here:
        if (txtTeleNos.getText().equals("Primary No.")) {
            txtTeleNos.setText("");
            txtTeleNos.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtTeleNosFocusGained

    private void txtTeleNosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTeleNosFocusLost
        // TODO add your handling code here:
        if (txtTeleNos.getText().equals("")) {
            txtTeleNos.setText("Primary No.");
            txtTeleNos.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtTeleNosFocusLost

    private void txtAltNosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAltNosFocusGained
        // TODO add your handling code here:
        if (txtAltNos.getText().equals("Alternate No.")) {
            txtAltNos.setText("");
            txtAltNos.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtAltNosFocusGained

    private void txtAltNosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAltNosFocusLost
        // TODO add your handling code here:
        if (txtAltNos.getText().equals("")) {
            txtAltNos.setText("Alternate No.");
            txtAltNos.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtAltNosFocusLost

    private void txtEmailFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusGained
        // TODO add your handling code here:
        if (txtEmail.getText().equals("Primary Email")) {
            txtEmail.setText("");
            txtEmail.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtEmailFocusGained

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusLost
        // TODO add your handling code here:
        if (txtEmail.getText().equals("")) {
            txtEmail.setText("Primary Email");
            txtEmail.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtEmailFocusLost

    private void txtAltEmail1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAltEmail1FocusGained
        // TODO add your handling code here:
        if (txtAltEmail1.getText().equals("Alternate Email")) {
            txtAltEmail1.setText("");
            txtAltEmail1.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtAltEmail1FocusGained

    private void txtAltEmail1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAltEmail1FocusLost
        // TODO add your handling code here:
        if (txtAltEmail1.getText().equals("")) {
            txtAltEmail1.setText("Alternate Email");
            txtAltEmail1.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtAltEmail1FocusLost

    private void txtGeoDataFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGeoDataFocusGained
        // TODO add your handling code here:
        if (txtGeoData.getText().equals("Address Line 1")) {
            txtGeoData.setText("");
            txtGeoData.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtGeoDataFocusGained

    private void txtGeoDataFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGeoDataFocusLost
        // TODO add your handling code here:
        if (txtGeoData.getText().equals("")) {
            txtGeoData.setText("Address Line 1");
            txtGeoData.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtGeoDataFocusLost

    private void txtGeoData1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGeoData1FocusGained
        // TODO add your handling code here:
        if (txtGeoData1.getText().equals("Address Line 2")) {
            txtGeoData1.setText("");
            txtGeoData1.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtGeoData1FocusGained

    private void txtGeoData1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGeoData1FocusLost
        // TODO add your handling code here:
        if (txtGeoData1.getText().equals("")) {
            txtGeoData1.setText("Address Line 2");
            txtGeoData1.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtGeoData1FocusLost

    private void txtDobFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDobFocusGained
        // TODO add your handling code here:
        if (txtDob.getText().equals("yyyy-mm-dd")) {
            txtDob.setText("");
            txtDob.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtDobFocusGained

    private void txtDobFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDobFocusLost
        // TODO add your handling code here:
        if (txtDob.getText().equals("")) {
            txtDob.setText("yyyy-mm-dd");
            txtDob.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtDobFocusLost

    private void txtFaxNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFaxNoFocusGained
        // TODO add your handling code here:
        if (txtFaxNo.getText().equals("8 digit FAX number")) {
            txtFaxNo.setText("");
            txtFaxNo.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtFaxNoFocusGained

    private void txtFaxNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFaxNoFocusLost
        // TODO add your handling code here:
        if (txtFaxNo.getText().equals("")) {
            txtFaxNo.setText("8 digit FAX number");
            txtFaxNo.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtFaxNoFocusLost

    private void txtSsnFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSsnFocusGained
        // TODO add your handling code here:
        if (txtSsn.getText().equals("9 digit SSN")) {
            txtSsn.setText("");
            txtSsn.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtSsnFocusGained

    private void txtSsnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSsnFocusLost
        // TODO add your handling code here:
        if (txtSsn.getText().equals("")) {
            txtSsn.setText("9 digit SSN");
            txtSsn.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtSsnFocusLost

    private void txtLinkedinFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLinkedinFocusGained
        // TODO add your handling code here:
        if (txtLinkedin.getText().equals("Valid URL")) {
            txtLinkedin.setText("");
            txtLinkedin.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_txtLinkedinFocusGained

    private void txtLinkedinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLinkedinFocusLost
        // TODO add your handling code here:
        if (txtLinkedin.getText().equals("")) {
            txtLinkedin.setText("Valid URL");
            txtLinkedin.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtLinkedinFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseBiometric;
    private javax.swing.JButton btnBrowseImg;
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JPanel jSubPanel;
    private javax.swing.JLabel lblBankAcc;
    private javax.swing.JLabel lblBiometric;
    private javax.swing.JLabel lblDeviceIden;
    private javax.swing.JLabel lblDob;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFacePhoto;
    private javax.swing.JLabel lblFaxNo;
    private javax.swing.JLabel lblGeoData;
    private javax.swing.JLabel lblHealthPlanNum;
    private javax.swing.JLabel lblIpAddress;
    private javax.swing.JLabel lblLicenseNo;
    private javax.swing.JLabel lblLinkedIn;
    private javax.swing.JLabel lblMedicalRecNum;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNote;
    private javax.swing.JLabel lblSsn;
    private javax.swing.JLabel lblTeleNos;
    private javax.swing.JLabel lblUniqueIden;
    private javax.swing.JLabel lblVehicleIden;
    private javax.swing.JLabel llblCreate;
    private javax.swing.JTextField txtAltEmail1;
    private javax.swing.JTextField txtAltNos;
    private javax.swing.JTextField txtBankAcc;
    private javax.swing.JTextField txtDeviceIden;
    private javax.swing.JTextField txtDob;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFaxNo;
    private javax.swing.JTextField txtGeoData;
    private javax.swing.JTextField txtGeoData1;
    private javax.swing.JTextField txtHealthPlanNum;
    private javax.swing.JTextField txtIpAddress;
    private javax.swing.JTextField txtLicenseNo;
    private javax.swing.JTextField txtLinkedin;
    private javax.swing.JTextField txtMedicalRecNum;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSsn;
    private javax.swing.JTextField txtTeleNos;
    private javax.swing.JTextField txtUniqueIden;
    private javax.swing.JTextField txtVehicleIden;
    // End of variables declaration//GEN-END:variables

    /**
     * Method to validate the input fields
     *
     * @return
     */
    private boolean validations() {
        
        boolean validData = true;

        // validate the name field
        if (txtName.getText().isBlank() || txtName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name is blank, enter some data!");
            validData = false;
            return validData;
        } // validate the address line 1 field
        else if (txtGeoData.getText().isBlank() || txtGeoData.getText().isEmpty() || txtGeoData.getText().equals("Address Line 1")) {
            JOptionPane.showMessageDialog(this, "Address Line 1 is blank, enter some data!");
            validData = false;
            return validData;
        } // validate the address line 2 field
        else if (txtGeoData1.getText().isBlank() || txtGeoData1.getText().isEmpty() || txtGeoData1.getText().equals("Address Line 2")) {
            JOptionPane.showMessageDialog(this, "Address Line 2 is blank, enter some data!");
            validData = false;
            return validData;
        } // validate the date of birth
        else if (!dateValidate(txtDob.getText(), "yyyy-mm-dd")) {
            JOptionPane.showMessageDialog(this, "Enter a valid date format!");
            validData = false;
            return validData;
        } // validate Primary Telephone Number
        else if (!teleNumValidate(txtTeleNos.getText(), "Primary No.")) {
            JOptionPane.showMessageDialog(this, "Enter a valid Primary telephone Number!");
            validData = false;
            return validData;
        } // validate Alternate Telephone Number
        else if (!teleNumValidate(txtAltNos.getText(), "Alternate No.")) {
            JOptionPane.showMessageDialog(this, "Enter a valid Alternate telephone Number!");
            validData = false;
            return validData;
        } // validate Fax Number 
        else if (!faxValidate(txtFaxNo.getText(), "8 digit FAX number")) {
            JOptionPane.showMessageDialog(this, "Enter a valid Fax Number!");
            validData = false;
            return validData;
        } // check if the primary email address is valid
        else if (!emailValidate(txtEmail.getText(), "Primary Email")) {
            JOptionPane.showMessageDialog(this, "Enter a valid Primary Email address!");
            validData = false;
            return validData;
        } // check if the alternate email address is valid 
        else if (!emailValidate(txtAltEmail1.getText(), "Alternate Email")) {
            JOptionPane.showMessageDialog(this, "Enter a valid Alternate Email address!");
            validData = false;
            return validData;
        } // validate if the ssn is entered correctly
        else if (!ssnValidate(txtSsn.getText(), "9 digit SSN")) {
            JOptionPane.showMessageDialog(this, "Enter a valid Social Security Number!");
            validData = false;
            return validData;
        } // validate medical record number
        else if (txtMedicalRecNum.getText().isBlank() || txtMedicalRecNum.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Medical Record Number is blank, enter some data!");
            validData = false;
            return validData;
        } //  validate health plan number
        else if (txtHealthPlanNum.getText().isBlank() || txtHealthPlanNum.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Health Plan Number is blank, enter some data!");
            validData = false;
            return validData;
        } // validate bank account number
        else if (txtBankAcc.getText().isBlank() || txtBankAcc.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bank Account Number is blank, enter some data!");
            validData = false;
            return validData;
        } // validate license number
        else if (txtLicenseNo.getText().isBlank() || txtLicenseNo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Certificate/License Number is blank, enter some data!");
            validData = false;
            return validData;
        } // validate vehicle identifier 
        else if (txtVehicleIden.getText().isBlank() || txtVehicleIden.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vehicle Identifier is blank, enter some data!");
            validData = false;
            return validData;
        }// validate device identifiers
        else if (txtDeviceIden.getText().isBlank() || txtDeviceIden.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Device Identifiers and Serial Number is blank, enter some data!");
            validData = false;
            return validData;
        } // validate linkedin
        else if (!linkedinValidator(txtLinkedin.getText(), "Valid URL")) {
            JOptionPane.showMessageDialog(this, "Enter a valid LinkedIn profile link!");
            validData = false;
            return validData;
        } // validate ip address
        else if (txtIpAddress.getText().isBlank() || txtIpAddress.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Internet Protocol Address is blank, enter some data!");
            validData = false;
            return validData;
        } // validate biometrics
        else if (personalDetails.getBiometric() == null || personalDetails.getBiometric().isBlank() || personalDetails.getBiometric().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Biometric file not chosen, choose one!");
            validData = false;
            return validData;
        } // validate face photo 
        else if (personalDetails.getFacePhoto() == null || personalDetails.getFacePhoto().isBlank() || personalDetails.getFacePhoto().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Face photograph file not chosen, choose one!");
            validData = false;
            return validData;
        } // validate unique identifier
        else if (txtUniqueIden.getText().isBlank() || txtUniqueIden.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Unique Identifier is blank, enter some data!");
            validData = false;
            return validData;
        } else {
            return true;
            
        }
    }

    /**
     * Convert String to date
     *
     * @param dateString
     * @return
     * @throws ParseException
     */
    private Date stringToDateConverter(String dateString) {
        try {
            Date date = new SimpleDateFormat("yyyy-mm-dd").parse(dateString);
            return date;
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Enter a valid date format1!");
        }
        return null;
    }

    /**
     * Validate the input date field
     *
     * @param dateString
     */
    private boolean dateValidate(String dateString, String defaultValue) {
        if (dateString.isBlank() || dateString.isEmpty() || dateString.equals(defaultValue)) {
            return false;
        } else if (!dateString.isBlank() && !dateString.isEmpty() && !dateString.equals(defaultValue)) {
            try {
                Date date = new SimpleDateFormat("yyyy-mm-dd").parse(dateString);
            } catch (ParseException ex) {
                return false;
            }
        }
        return true;
    }

    /**
     * Validate the input email field
     *
     * @param email
     * @return
     */
    private boolean emailValidate(String email, String defaultValue) {
        if (email.isBlank() || email.isEmpty() || email.equals(defaultValue)) {
            return false;
        } else if (!email.isBlank() && !email.isEmpty() && !email.equals(defaultValue) && !email.contains("@")) {
            return false;
        } else if (!email.isBlank() && !email.isEmpty() && !email.equals(defaultValue) && !email.contains(".com")) {
            return false;
        }
        return true;
    }

    /**
     * Validate SSN
     *
     * @param ssn
     * @return
     */
    private boolean ssnValidate(String ssn, String defaultString) {
        if (ssn.isBlank() || ssn.isEmpty() || ssn.equals(defaultString)) {
            return false;
        } else if (!ssn.isBlank() && !ssn.isEmpty() && !ssn.equals(defaultString) && ssn.trim().length() != 9) {
            return false;
        }
        return true;
    }

    /**
     * Method to validate the fax number
     *
     * @param faxNumber
     * @return
     */
    private boolean faxValidate(String faxNumString, String defaultString) {
        if (faxNumString.isBlank() || faxNumString.isEmpty() || faxNumString.equals(defaultString)) {
            return false;
        } else if (!faxNumString.isBlank() && !faxNumString.isEmpty() && !faxNumString.equals(defaultString) && faxNumString.trim().length() != 8) {
            return false;
        }
        return true;
    }

    /**
     * Method to validate the telephone number
     *
     * @param teleNumString
     * @return
     */
    private boolean teleNumValidate(String teleNumString, String defaultValue) {
        if (teleNumString.isBlank() || teleNumString.isEmpty() || teleNumString.equals(defaultValue)) {
            return false;
        } else if (!teleNumString.isBlank() && !teleNumString.isEmpty() && !teleNumString.equals(defaultValue) && teleNumString.trim().length() != 10) {
            return false;
        }
        return true;
    }

    /**
     * method to validate the linkedin string
     *
     * @param linkedin
     * @return
     */
    private boolean linkedinValidator(String linkedin, String defaultString) {
        if (linkedin.isBlank() || linkedin.isEmpty() || linkedin.equals(defaultString)) {
            return false;
        } else if (!linkedin.isBlank() && !linkedin.isEmpty() && !linkedin.equals(defaultString) && !linkedin.contains("http")) {
            return false;
        } else if (!linkedin.isBlank() && !linkedin.isEmpty() && !linkedin.equals(defaultString) && !linkedin.contains(".com")) {
            return false;
        }
        return true;
    }

    /**
     * This method reads the value from the Text field and maps it to the
     * personal details instance
     */
    private void readValsFromTxtFields() throws ParseException {
        personalDetails.setName(txtName.getText());
        personalDetails.setAddressLineOne(txtGeoData.getText());
        personalDetails.setAddressLineTwo(txtGeoData1.getText());
        personalDetails.setDob(stringToDateConverter(txtDob.getText()));
        personalDetails.setPrimaryTeleNum(convertStringToLong(txtTeleNos.getText()));
        personalDetails.setAltTeleNum(convertStringToLong(txtAltNos.getText()));
        personalDetails.setFaxNo(convertStringToInt(txtFaxNo.getText()));
        personalDetails.setPrimaryEmail(txtEmail.getText());
        personalDetails.setAlternateEmail(txtAltEmail1.getText());
        personalDetails.setSsn(convertStringToInt(txtSsn.getText()));
        personalDetails.setMedicalRecNum(txtMedicalRecNum.getText());
        personalDetails.setHealthPlanNum(txtHealthPlanNum.getText());
        personalDetails.setBankAcc(convertStringToInt(txtBankAcc.getText()));
        personalDetails.setLicenseNo(txtLicenseNo.getText());
        personalDetails.setVehicleIden(txtVehicleIden.getText());
        personalDetails.setDeviceIden(txtDeviceIden.getText());
        personalDetails.setLinkedIn(txtLinkedin.getText());
        personalDetails.setIpAddress(txtIpAddress.getText());
        personalDetails.setUniqueIden(txtUniqueIden.getText());

        // Show a pop-up when the save button is clicked
        JOptionPane.showMessageDialog(this, "Changes have been saved.");
    }

    /**
     * Method to convert String to Int
     *
     * @param stringValue
     * @return
     */
    private int convertStringToInt(String stringValue) {
        Integer intValue = null;
        return intValue.parseInt(stringValue);
    }

    /**
     * Method to convert String to long
     *
     * @param stringValue
     * @return
     */
    private Long convertStringToLong(String stringValue) {
        Long longValue = null;
        return longValue.parseLong(stringValue);
    }
}
